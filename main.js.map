{"version":3,"sources":["webpack://Project-ToDo-List/./src/index.js","webpack://Project-ToDo-List/./src/modules/taskFactory.js","webpack://Project-ToDo-List/./src/modules/taskHelpers.js","webpack://Project-ToDo-List/webpack/bootstrap","webpack://Project-ToDo-List/webpack/runtime/define property getters","webpack://Project-ToDo-List/webpack/runtime/hasOwnProperty shorthand","webpack://Project-ToDo-List/webpack/runtime/make namespace object","webpack://Project-ToDo-List/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;AACiG;;AAEjG;AACA;AACA,wCAAwC,iEAAe;;AAEvD;AACA;AACA,oCAAoC,kEAAgB;;AAEpD;AACA,kEAAY;;;;;;;;;;;;;;;;;ACZZ;;AAEA;AACA;AACA;AACA;AACA,WAAW;AACX;;;;;;;;;;;;;;;;;;;;;ACNkD;;AAElD;AACA;AACA;AACA,eAAe,yDAAW;AAC1B,IAAI,sDAAY;AAChB;AACA;AACA,gBAAgB,iDAAO;AACvB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,4B;AACA,yBAAyB;AACzB;AACA;;AAEA;;AAEA;AACA;AACA;;;;;;;;;UCzEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["\nimport {addTaskToProject, hideTaskForm, displayTaskForm, renderTask} from './modules/taskHelpers'\n\n//displays tasks when '+ Task' is clicked\nconst addTaskButton = document.getElementById('addTask');\naddTaskButton.addEventListener('click', displayTaskForm) \n\n//add button for task form to submit tasks\nconst addButton = document.getElementById('taskDoneButton');\naddButton.addEventListener('click', addTaskToProject);\n\n//keeps form to submit tasks hidden until '+ Task' is clicked\nhideTaskForm();\n\n","const project = [];\n\n//complete, name, priority, date, always want complete to be set to false automatically, id = project.length\nconst taskFactory = (taskName, priority, date) => {\n    let completedStatus = false;\n    let id = project.length;\n    return{completedStatus, taskName, priority, date, id}\n}\n\n\nexport {taskFactory, project}","\nimport {taskFactory, project} from './taskFactory'\n\n//when you click add button it adds the task to the Project Array and uses the values in the task Factory.\nfunction addTaskToProject() {\n    event.preventDefault();\n    let task = taskFactory(taskName.value, priority.value, date.value)\n    project.push(task);\n    taskForm.reset();\n    taskForm.style.display = 'none';\n    console.log(project)\n    renderTask(task)\n}\n\n//set so form is hidden till clicked \nfunction hideTaskForm(){\n    const taskForm = document.getElementById('taskForm');\n    taskForm.style.display = 'none';\n}\n\n//display task form\nfunction displayTaskForm() {\n    taskForm.style.display = 'block';\n}\n\n\n//render task in DOM\nfunction renderTask(item){\n    const app = document.getElementById('app');\n\n    const taskWrapper = document.createElement('div');\n    taskWrapper.className = 'task';\n\n    const completeButton = document.createElement('button');\n    completeButton.className = 'taskCompleteBtn';\n    completeButton.textContent = 'âœ“';\n    let status = item.completedStatus; console.log(status);\n    completeButton.addEventListener('click', changeStatus)\n    taskWrapper.appendChild(completeButton);\n\n    const taskName = document.createElement('div');\n    taskName.className = 'taskNameDiv';\n    taskName.textContent =  item.taskName //way to add name in here\n    taskWrapper.appendChild(taskName);\n\n    const taskPriority = document.createElement('div');\n    taskPriority.className = 'taskPriorityDiv';\n    taskPriority.textContent =  item.priority //way to add name in here\n    taskWrapper.appendChild(taskPriority);\n\n    const taskDate = document.createElement('div');\n    taskDate.className = 'taskDateDiv';\n    taskDate.textContent =  item.date //way to add name in here\n    taskWrapper.appendChild(taskDate);\n\n    const deleteButton = document.createElement('button');\n    deleteButton.className = 'taskDeleteBtn';\n    deleteButton.textContent = 'X';\n    //need to add event listener\n    taskWrapper.appendChild(deleteButton)\n\n    app.append(taskWrapper)\n\n    //change color of completed task\n    function changeStatus(){   \n        status = !status; console.log(status);\n        (status === false) ? this.style.backgroundColor = 'pink' : this.style.backgroundColor = 'orange';\n    }\n\n    function deleteTask() {\n        \n    }\n    //\n}\n\n\nexport {addTaskToProject, hideTaskForm, displayTaskForm}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n__webpack_require__(\"./src/index.js\");\n// This entry module used 'exports' so it can't be inlined\n"],"sourceRoot":""}