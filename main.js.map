{"version":3,"sources":["webpack://Project-ToDo-List/./src/index.js","webpack://Project-ToDo-List/./src/modules/DOM.js","webpack://Project-ToDo-List/./src/modules/projectFactory.js","webpack://Project-ToDo-List/./src/modules/projectHelpers.js","webpack://Project-ToDo-List/./src/modules/taskFactory.js","webpack://Project-ToDo-List/./src/modules/taskHelpers.js","webpack://Project-ToDo-List/webpack/bootstrap","webpack://Project-ToDo-List/webpack/runtime/define property getters","webpack://Project-ToDo-List/webpack/runtime/hasOwnProperty shorthand","webpack://Project-ToDo-List/webpack/runtime/make namespace object","webpack://Project-ToDo-List/webpack/startup"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["\nimport {addTaskToProject, hideTaskForm, displayTaskForm, hideAddTaskButton} from './modules/taskHelpers'\nimport {hideProjectForm, displayProjectForm, addProject} from './modules/projectHelpers'\nimport { renderProject } from './modules/DOM';\n\n//holds app projects\nlet allProjects = []; \n\n//display form when '+ Project' clicked\nconst addProjectButton = document.getElementById('addProject');\naddProjectButton.addEventListener('click', displayProjectForm)\n\n//submit project button \nconst submitProjectButton = document.getElementById('projectSubmit');\nsubmitProjectButton.addEventListener('click', addProject)\n\n//displays tasks when '+ Task' is clicked\nconst addTaskButton = document.getElementById('addTask');\naddTaskButton.addEventListener('click', displayTaskForm) \n\n//submit task button\nconst submitTaskButton = document.getElementById('taskSubmit');\nsubmitTaskButton.addEventListener('click', addTaskToProject);\n\n\n//keeps form to submit tasks and projects hidden until '+ Task' is clicked\nhideTaskForm();\nhideProjectForm();\n\n//keeps add task button hidden\nhideAddTaskButton();\n\n\n// //Local Storage functions\n// function setData() {\n//     localStorage.setItem('allProjects', JSON.stringify(allProjects));\n// }\n\n// function getData(){\n//     let project = localStorage.getItem('allProjects');\n//     project = JSON.parse(project);\n//     allProjects = project;\n//     allProjects.forEach(project => { renderProject(project)});\n// }\n\n// getData();\n\nexport {allProjects}\n\n// {name: 'Default Project', description: 'This is the default project', tasks:[{taskName: 'Default Task', priority: 'Medium', date: 10/10/10, completedStatus: false, id: 0}], id:0}","import {allProjects} from '/src/index.js';\nimport {displayAddTaskButton, displayTaskForm, hideAddTaskButton, hideTaskForm} from './taskHelpers';\n\n//for use in /addTaskToProject() deleteTask(), tells it which project to add task to, set when project is clicked\nlet specificProject = ''; \n\n//for use in /addTaskToProject() when updating for splice value\nlet specificTask = ''; \n\nlet specificComplete = '';\n\n//render task in DOM + complete & delete functionality\nfunction renderTask(item){\n    const submitTaskBtn = document.getElementById('taskSubmit');\n    const taskHolder = document.getElementById('tasksHolder');\n\n    const taskWrapper = document.createElement('div');\n    taskWrapper.className = 'task';\n    taskWrapper.addEventListener('click', editTask)\n\n    const completeButton = document.createElement('button');\n    completeButton.className = 'taskCompleteBtn';\n    completeButton.textContent = 'âœ“';\n    (item.completedStatus === false) ? completeButton.style.backgroundColor = '#EFEFEF' : completeButton.style.backgroundColor = 'rgb(115, 155, 96)';\n    completeButton.addEventListener('click', changeStatus)\n    taskWrapper.appendChild(completeButton);\n    \n    const taskName = document.createElement('div');\n    taskName.className = 'taskNameDiv';\n    taskName.textContent =  item.nameTask;\n    taskWrapper.appendChild(taskName);\n\n\n    const taskPriority = document.createElement('div');\n    taskPriority.className = 'taskPriorityDiv';\n    taskPriority.textContent =  item.priority \n    taskWrapper.appendChild(taskPriority);\n\n    const taskDate = document.createElement('div');\n    taskDate.className = 'taskDateDiv';\n    taskDate.textContent =  item.date \n    taskWrapper.appendChild(taskDate);\n\n    const deleteButton = document.createElement('button');\n    deleteButton.className = 'taskDeleteBtn';\n    deleteButton.textContent = 'X';\n    item.id = specificProject.tasks.indexOf(item);\n    let index = item.id;\n    deleteButton.addEventListener('click', deleteTask)\n    taskWrapper.appendChild(deleteButton)\n\n    taskHolder.append(taskWrapper)\n\n    function deleteTask(){  \n        hideTaskForm();\n        taskForm.reset()\n        submitTaskBtn.textContent = 'Add';\n        specificProject.tasks.splice(index,1); \n        taskHolder.innerHTML ='';\n        specificProject.tasks.forEach(task => {renderTask(task)}); \n    }\n\n    //change color of completed task    //could also just re-render and remove color change on click since it will change the status and re-rendering will render it with new color linked to status\n    function changeStatus(){  \n        item.completedStatus = !item.completedStatus;  console.log(item);\n        (item.completedStatus === false) ? this.style.backgroundColor = '#EFEFEF' : this.style.backgroundColor = 'rgb(115, 155, 96)';  //something in render so that if the status is changed it renders in the correct color, not only when clicked\n        specificComplete = item.completedStatus; console.log(specificComplete); //idk if i need this , idk about specific task either\n    }\n\n    //display task description and edit when clicked\n\n    function editTask(){\n        if(event.target !== deleteButton && event.target !== completeButton){\n            submitTaskBtn.textContent = 'Update';\n            displayTaskForm();\n            nameTask.value = item.nameTask;\n            priority.value = item.priority;\n            date.value = item.date;\n            taskDescription.value = item.taskDescription;\n            specificTask = item.id;  console.log(item.id)  \n            specificComplete = item.completedStatus; //idk if i need this or not \n        }\n    }\n}\n\n// render PROJECT and give project functionality\nfunction renderProject(item){\n    const projectHolder = document.getElementById('projectsHolder');\n    const name = document.getElementById('Name')\n    const description = document.getElementById('Description')\n    const taskHolder = document.getElementById('tasksHolder');\n\n    const projectWrapper = document.createElement('div');\n    projectWrapper.className = 'project';\n    projectWrapper.addEventListener('click', displayProject); //renders current projects tasks\n\n    const deleteButton = document.createElement('button');\n    deleteButton.className = 'projectDeleteBtn';\n    deleteButton.textContent = 'X';\n    item.id = allProjects.indexOf(item);\n    let index = item.id;\n    deleteButton.addEventListener('click', deleteProject); \n    projectWrapper.appendChild(deleteButton);\n\n    const projectName = document.createElement('div');\n    projectName.className = 'projectName';\n    projectName.textContent = item.name;\n    projectWrapper.appendChild(projectName);\n    projectHolder.appendChild(projectWrapper);\n\n    function deleteProject() {\n        allProjects.splice(index, 1);\n        projectHolder.innerHTML = '';\n        allProjects.forEach(project => renderProject(project)); console.table(allProjects)\n        if(allProjects.length === 0) {\n            taskHolder.innerHTML = '';\n            name.textContent = 'Please Create a Project';\n            description.textContent = 'Select a project to add tasks to it!';\n            hideAddTaskButton();\n        }\n    }\n\n    function displayProject(){\n        console.log(event.target)\n        specificProject = allProjects[index]; //console.log(specificProject.tasks);\n        if(event.target !== deleteButton) {\n            name.textContent = item.name;\n            description.textContent = item.description;\n            taskHolder.innerHTML = '';\n            specificProject.tasks.forEach(task => {renderTask(task)})\n            displayAddTaskButton();\n        }\n    }\n}\n\nexport {renderTask, renderProject, specificProject, specificTask, specificComplete}","const projectFactory = (name, description) => {\n    let tasks = [];\n    let id = '';\n\n    return{name, description, tasks, id}\n}\n\nexport {projectFactory}","import {projectFactory} from './projectFactory'\nimport {renderProject} from './DOM'\nimport {allProjects, setData} from '/src/index.js'\n\n\nfunction hideProjectForm() {\n    const projectForm = document.getElementById('projectForm');\n    projectForm.style.display = 'none';\n}\n\nfunction displayProjectForm() {\n    projectForm.style.display = 'block';\n}\n\nfunction addProject() {\n    event.preventDefault();\n    let project = projectFactory(projectName.value, projectDescription.value)\n    hideProjectForm();\n    allProjects.push(project);\n    projectForm.reset();\n    renderProject(project);\n    console.log('AllProject:', allProjects)\n}\nexport {hideProjectForm, displayProjectForm, addProject}","\n//complete, name, priority, date, always want complete to be set to false automatically, id = project.length\nconst taskFactory = (nameTask, priority, date) => {\n    let completedStatus = false;\n    let id = ' ';\n    \n    return{completedStatus, nameTask, priority, date, id}\n}\n\nexport {taskFactory}","\nimport {taskFactory} from './taskFactory'\nimport {specificTask, renderTask, specificProject, specificComplete} from './DOM'\n//import {setData} from '/src/index.js'\n\n//when you click add button it adds the task to the Project Array and uses the values in the task Factory.\nfunction addTaskToProject() {\n    let task = taskFactory(nameTask.value, priority.value, date.value)\n    let project = specificProject.tasks;\n    let taskholder = document.getElementById('tasksHolder');\n\n   \n    if(this.innerHTML == 'Add') {\n        event.preventDefault();\n        task = taskFactory(nameTask.value, priority.value, date.value)\n        task.taskDescription = taskDescription.value;\n        project.push(task);\n        taskForm.reset();\n        hideTaskForm();\n        renderTask(task);\n        console.log('This Projects Task', specificProject.tasks)\n    }else if(this.innerHTML == 'Update'){\n        event.preventDefault();\n        task = taskFactory(nameTask.value, priority.value, date.value)\n        task.taskDescription = taskDescription.value;\n        task.completedStatus = specificComplete;console.log(specificTask) //idk if I need this  \n        project.splice(specificTask, 1, task); console.log(task.id); console.log(task)\n        taskholder.innerHTML = '';\n        specificProject.tasks.forEach(task => {renderTask(task)}); \n        console.log('This Projects Task', specificProject.tasks)\n        hideTaskForm();\n        this.innerHTML = 'Add';\n        taskForm.reset();\n    }\n}\n\n//set so form is hidden till clicked \nfunction hideTaskForm(){\n    const taskForm = document.getElementById('taskForm');\n    taskForm.style.display = 'none';\n}\n\n//display task form\nfunction displayTaskForm() {\n    taskForm.style.display = 'block';\n}\n\nfunction hideAddTaskButton() {\n    const addTask = document.getElementById('addTask');\n    addTask.style.display = 'none';\n}\n\nfunction displayAddTaskButton() {\n    const addTask = document.getElementById('addTask');\n    addTask.style.display = 'block';\n}\n\n\nexport {addTaskToProject, hideTaskForm, displayTaskForm, hideAddTaskButton, displayAddTaskButton}\n\n// https://medium.com/javascript-scene/javascript-factory-functions-with-es6-4d224591a8b1 object in ff","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}