{"version":3,"sources":["webpack://Project-ToDo-List/./src/index.js","webpack://Project-ToDo-List/./src/modules/DOM.js","webpack://Project-ToDo-List/./src/modules/projectFactory.js","webpack://Project-ToDo-List/./src/modules/projectHelpers.js","webpack://Project-ToDo-List/./src/modules/taskFactory.js","webpack://Project-ToDo-List/./src/modules/taskHelpers.js","webpack://Project-ToDo-List/webpack/bootstrap","webpack://Project-ToDo-List/webpack/runtime/define property getters","webpack://Project-ToDo-List/webpack/runtime/hasOwnProperty shorthand","webpack://Project-ToDo-List/webpack/runtime/make namespace object","webpack://Project-ToDo-List/webpack/startup"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACqF;AACG;;AAExF;AACA,uB;;AAEA;AACA;AACA,2CAA2C,uEAAkB;;AAE7D;AACA;AACA,8CAA8C,+DAAU;AACxD;AACA;AACA,wCAAwC,iEAAe;;AAEvD;AACA;AACA,2CAA2C,kEAAgB;;;AAG3D;AACA,kEAAY;AACZ,wEAAe;;;;;;;;;;;;;;;;;;;ACzB6B;;AAE5C;AACA,yB;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,sC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wB;AACA;AACA;;AAEA;;AAEA;AACA,+B;AACA;AACA,gCAAgC,iBAAiB,EAAE;AACnD;;AAEA;AACA,4B;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6DAA6D;;AAE7D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,8DAAmB;AACjC;AACA,0D;AACA;;AAEA;;AAEA;AACA,QAAQ,6DAAkB;AAC1B;AACA,QAAQ,8DAAmB,8BAA8B,eAAe,sDAAW;AACnF;;AAEA;AACA,0BAA0B,sDAAW,QAAQ;AAC7C;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACjGA;AACA;AACA;;AAEA,WAAW;AACX;;;;;;;;;;;;;;;;;;;;;ACL+C;AACZ;AACQ;;;AAG3C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,+DAAc;AAChC;AACA,IAAI,2DAAgB;AACpB;AACA,IAAI,mDAAa;AACjB,+BAA+B,sDAAW;AAC1C;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA,WAAW,8C;AACX;;;;;;;;;;;;;;;;;;;;;ACLyC;AACQ;;;AAGjD;AACA;AACA;AACA,eAAe,yDAAW;AAC1B,kBAAkB,uDAAqB;AACvC;AACA;AACA;AACA,IAAI,gDAAU;AACd,gBAAgB,iDAAe,EAAE,uDAAqB;AACtD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;UC1BA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCrBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,sF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;UCNA;UACA;UACA;UACA","file":"main.js","sourcesContent":["\nimport {addTaskToProject, hideTaskForm, displayTaskForm} from './modules/taskHelpers'\nimport {hideProjectForm, displayProjectForm, addProject} from './modules/projectHelpers'\n\n//holds app projects\nconst allProjects = []; \n\n//display form when '+ Project' clicked\nconst addProjectButton = document.getElementById('addProject');\naddProjectButton.addEventListener('click', displayProjectForm)\n\n//submit project button \nconst submitProjectButton = document.getElementById('projectSubmit');\nsubmitProjectButton.addEventListener('click', addProject)\n//displays tasks when '+ Task' is clicked\nconst addTaskButton = document.getElementById('addTask');\naddTaskButton.addEventListener('click', displayTaskForm) \n\n//submit task button\nconst submitTaskButton = document.getElementById('taskSubmit');\nsubmitTaskButton.addEventListener('click', addTaskToProject);\n\n\n//keeps form to submit tasks and projects hidden until '+ Task' is clicked\nhideTaskForm();\nhideProjectForm();\n\nexport {allProjects}","import { allProjects } from '/src/index.js';\n\n//for use in /addTaskToProject, tells it which project to add task to, set when project is clicked\nlet specificProject = ''; \n\n//render task in DOM + complete & delete functionality\nfunction renderTask(item,project){\n    const taskHolder = document.getElementById('tasksHolder');\n\n    const taskWrapper = document.createElement('div');\n    taskWrapper.className = 'task';\n\n    const completeButton = document.createElement('button');\n    completeButton.className = 'taskCompleteBtn';\n    completeButton.textContent = 'âœ“';\n    let status = item.completedStatus; \n    completeButton.addEventListener('click', changeStatus)\n    taskWrapper.appendChild(completeButton);\n    \n    const taskName = document.createElement('div');\n    taskName.className = 'taskNameDiv';\n    taskName.textContent =  item.taskName \n    taskWrapper.appendChild(taskName);\n\n    const taskPriority = document.createElement('div');\n    taskPriority.className = 'taskPriorityDiv';\n    taskPriority.textContent =  item.priority \n    taskWrapper.appendChild(taskPriority);\n\n    const taskDate = document.createElement('div');\n    taskDate.className = 'taskDateDiv';\n    taskDate.textContent =  item.date \n    taskWrapper.appendChild(taskDate);\n\n    const deleteButton = document.createElement('button');\n    deleteButton.className = 'taskDeleteBtn';\n    deleteButton.textContent = 'X';\n    item.id = project.indexOf(item);\n    let index = item.id; \n    deleteButton.addEventListener('click', deleteTask)\n    taskWrapper.appendChild(deleteButton)\n\n    taskHolder.append(taskWrapper)\n\n    function deleteTask() {\n       project.splice(index,1); \n       taskHolder.innerHTML =' ';\n       project.forEach(item => {renderTask(item)}); console.table(project)\n    }\n\n    //change color of completed task\n    function changeStatus(){   \n        status = !status; console.log(status);\n        (status === false) ? this.style.backgroundColor = 'transparent' : this.style.backgroundColor = 'rgb(115, 155, 96)';\n    }\n}\n\n//going to need to render tasks in here too when it is clicked\n\n// render PROJECT and give project functionality\nfunction renderProject(item){\n    const projectHolder = document.getElementById('projectsHolder');\n    const name = document.getElementById('Name')\n    const description = document.getElementById('Description')\n    const taskHolder = document.getElementById('tasksHolder');\n\n    const projectWrapper = document.createElement('div');\n    projectWrapper.className = 'project';\n    projectWrapper.addEventListener('click', displayProject); //renders current projects tasks\n\n    const projectName = document.createElement('div');\n    projectName.className = 'projectName';\n    projectName.textContent = item.name;\n    projectWrapper.appendChild(projectName);\n\n    const deleteButton = document.createElement('button');\n    deleteButton.className = 'projectDeleteBtn';\n    deleteButton.textContent = 'X';\n    item.id = allProjects.indexOf(item);\n    let index = item.id;\n    deleteButton.addEventListener('click', deleteProject); \n    projectWrapper.appendChild(deleteButton);\n\n    projectHolder.appendChild(projectWrapper);\n\n    function deleteProject() {\n        allProjects.splice(index, 1);\n        projectHolder.innerHTML = '';\n        allProjects.forEach(item => renderProject(item)); console.table(allProjects)\n    }\n\n    function displayProject(){\n        specificProject = allProjects[index]; console.log(specificProject);\n        name.textContent = item.name;\n        description.textContent = item.description;\n        taskHolder.innerHTML = '';\n    }\n}\n\nexport {renderTask, renderProject, specificProject}","const projectFactory = (name, description) => {\n    let tasks = [];\n    let id = '';\n\n    return{name, description, tasks, id}\n}\n\nexport {projectFactory}","import {projectFactory} from './projectFactory'\nimport {renderProject} from './DOM'\nimport { allProjects } from '/src/index.js'\n\n\nfunction hideProjectForm() {\n    const projectForm = document.getElementById('projectForm');\n    projectForm.style.display = 'none';\n}\n\nfunction displayProjectForm() {\n    projectForm.style.display = 'block';\n}\n\nfunction addProject() {\n    event.preventDefault();\n    let project = projectFactory(projectName.value, projectDescription.value)\n    hideProjectForm();\n    allProjects.push(project);\n    projectForm.reset();\n    renderProject(project);\n    console.log('AllProject:', allProjects)\n}\nexport {hideProjectForm, displayProjectForm, addProject}","\n//complete, name, priority, date, always want complete to be set to false automatically, id = project.length\nconst taskFactory = (taskName, priority, date) => {\n    let completedStatus = false;\n    let id = ' '\n    return{completedStatus, taskName, priority, date, id} \n}\n\nexport {taskFactory}","\nimport {taskFactory} from './taskFactory'\nimport {renderTask, specificProject} from './DOM'\n\n\n//when you click add button it adds the task to the Project Array and uses the values in the task Factory.\nfunction addTaskToProject() {\n    event.preventDefault();\n    let task = taskFactory(taskName.value, priority.value, date.value)\n    let project = specificProject.tasks;\n    project.push(task);\n    taskForm.reset();\n    taskForm.style.display = 'none';\n    renderTask(task, project);\n    console.log(specificProject, specificProject.tasks)\n}\n\n//set so form is hidden till clicked \nfunction hideTaskForm(){\n    const taskForm = document.getElementById('taskForm');\n    taskForm.style.display = 'none';\n}\n\n//display task form\nfunction displayTaskForm() {\n    taskForm.style.display = 'block';\n}\n\n\nexport {addTaskToProject, hideTaskForm, displayTaskForm}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(\"./src/index.js\");\n"],"sourceRoot":""}